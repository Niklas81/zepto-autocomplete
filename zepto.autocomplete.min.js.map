{"version":3,"file":"zepto.autocomplete.min.js","sources":["zepto.autocomplete.min.js"],"names":["$","methods","init","settings","createOptionsDiv","position","$appendDiv","$optionsContainerDiv","left","$this","offset","top","height","css","addClass","extraClass","attr","on","chooseOption","hide","appendTo","append","data","sort","_autoCompleteData","onBlur","event","optIndex","value","option","target","closest","onOptionSelect","undefined","val","computeOptions","setTimeout","focus","changeCurrentOpt","$other","$currentOpt","removeClass","callback","$optionDiv","$divs","query","empty","length","minLength","i","maxCount","dataMethod","Function","matcher","renderOption","add","show","keyHandler","prev","next","keyCode","children","eq","hasClass","this","settingsDefaults","Infinity","toString","toLowerCase","indexOf","lookUp","options","each","idx","push","storedData","extend","bind","destroy","unbind","remove","unique","arr","uniqArr","el","inArray","Array","concat","index","splice","fn","autocomplete","method","apply","prototype","slice","call","arguments","error","Zepto","jQuery"],"mappings":"CAMA,SAAUA,GACN,YAEA,IAAIC,IACAC,KAAM,SAASC,GAuCX,QAASC,KACL,GAAIC,GAAUC,EAAYC,CAC1BA,GAAuBP,EAAE,SACtBG,EAASE,WACRA,GACIG,KAAMC,EAAMC,SAASF,KACrBG,IAAKF,EAAMC,SAASC,IAAMF,EAAMG,UAEpCL,EAAqBM,IAAI,WAAY,YAAYA,IAAI,MAAOR,EAASM,KAAKE,IAAI,OAAQR,EAASG,MAAMK,IAAI,SAAU,MAGvHN,EAAqBO,SAAS,kCAAkCA,SAASX,EAASY,YAClFN,EAAMO,KAAK,oBAAqB,QAChCT,EAAqBU,GAAG,yBAA0B,MAAOC,GACzDX,EAAqBY,OACrBb,EAAkCN,EAApBG,EAAiB,SAAKA,EAASiB,SAAY,QACzDd,EAAWe,OAAOd,GAClBJ,EAASmB,KAAOnB,EAASoB,KAAKpB,EAASmB,MAEvCb,EAAM,GAAGe,mBACLrB,SAAUA,EACVI,qBAAsBA,GAG9B,QAASkB,KACL,GAAIlB,GAAuBE,EAAM,GAAGe,kBAAkBjB,qBAClDJ,EAAWM,EAAM,GAAGe,kBAAkBrB,QAC1CA,GAASsB,OAAOlB,GAEpB,QAASW,GAAaQ,EAAOC,GACzB,GAAIC,GAAOC,EACP1B,EAAWM,EAAM,GAAGe,kBAAkBrB,QAC1CwB,GAAWA,GAAY3B,EAAE0B,EAAMI,QAAQC,QAAQ,qBAAqBf,KAAK,kBACzEa,EAAS1B,EAASmB,KAAKK,GACvBC,EAAQzB,EAAS6B,eAAeH,GACnBI,SAAVL,GACCnB,EAAMyB,IAAIN,GAEdO,IACAC,WAAW,WACP3B,EAAM4B,UAGd,QAASC,GAAiBC,GACnBC,GACCA,EAAYC,YAAY,yBAE5BD,EAAcD,EACdC,EAAY1B,SAAS,yBAEzB,QAASqB,KACL,GAAIN,GACAa,EACAC,EACAC,EAAQ5C,IACR6C,EAAQpC,EAAMyB,MACd3B,EAAuBE,EAAM,GAAGe,kBAAkBjB,qBAClDJ,EAAWM,EAAM,GAAGe,kBAAkBrB,QAG1C,OAFAI,GAAqBuC,QAElBD,EAAME,OAAO5C,EAAS6C,cACrBzC,GAAqBY,QAIzBuB,EAAW,SAASpB,GAChBnB,EAASmB,KAAOnB,EAASoB,KAAKD,EAC9B,KAAI,GAAI2B,GAAE,EAAGA,EAAE3B,EAAKyB,QAAUH,EAAMG,QAAQ5C,EAAS+C,SAAUD,IAC3DpB,EAASP,EAAK2B,IAEV9C,EAASgD,qBAAsBC,WAAYjD,EAASkD,QAAQR,EAAOhB,MAEnEc,EAAa3C,EAAE,wCACf2C,EAAW3B,KAAK,iBAAkBiC,GAClCN,EAAWtB,OAAOlB,EAASmD,aAAazB,IACxCe,EAAQA,EAAMW,IAAIZ,GAGtBC,GAAMG,OAAO,IACbxC,EAAqBc,OAAOuB,GAC5BrC,EAAqBiD,cAG1BrD,EAASgD,qBAAsBC,UAC9BjD,EAASgD,WAAWN,EAAOH,GAE3BA,EAASvC,EAASmB,QAG1B,QAASmC,GAAW/B,GAChB,GAAIgC,GAAMC,EACNpD,EAAuBE,EAAM,GAAGe,kBAAkBjB,oBACtD,QAAQmB,EAAMkC,SACV,IAAK,IACGpB,EAIAkB,EAAOlB,EAAYkB,QAHnBpB,EAAiB/B,EAAqBsD,WAAWC,GAAG,IACpDJ,EAAOlB,GAIRkB,GAAQA,EAAKK,SAAS,qBACrBzB,EAAiBoB,EAErB,MACJ,KAAK,IACGlB,EAIAmB,EAAOnB,EAAYmB,QAHnBrB,EAAiB/B,EAAqBsD,WAAWC,GAAG,IACpDH,EAAOnB,GAIRmB,GAAQA,EAAKI,SAAS,qBACrBzB,EAAiBqB,EAErB,MACJ,KAAK,IAC0C,SAAxCpD,EAAqBM,IAAI,YACxBK,EAAaQ,EAAOc,EAAYxB,KAAK,kBAEzC,MACJ,SACImB,KA/JZ,GAAIK,GACA/B,EAAQuD,KACRC,GACI3C,QACA6B,WAAYlB,OACZe,UAAW,EACXE,SAAUgB,IACVnD,WAAY,GACZK,SAAU,GACVf,UAAU,EACVkB,KAAM,SAASD,GAEX,MAAQ0C,MAAKb,qBAAsBC,UAAW9B,EAAKA,EAAKC,QAE5D8B,QAAS,SAASR,EAAOhB,GACrB,MAAwE,KAAjEA,EAAOsC,WAAWC,cAAcC,QAAQxB,EAAMuB,gBAEzDE,OAAQ,SAAShD,EAAMO,GACnB,GAAI0C,KAIJ,OAHAvE,GAAEwE,KAAKlD,EAAM,SAASmD,EAAKvC,GACvBqC,EAAQG,KAAKxC,EAAIiC,cAEdI,EAAQF,QAAQxC,EAAOsC,aAElCb,aAAc,SAASzB,GACnB,MAAOA,GAAOsC,YAElBnC,eAAgB,SAASH,GACrB,MAAOA,GAAOsC,YAElB1C,OAAQ,SAASlB,GACbA,EAAqBY,SAG7BwD,EAAalE,EAAM,GAAGe,iBAmI1B,OAjIArB,GAAWH,EAAE4E,OAAOX,EAAkB9D,GAiIlCwE,EAAJ,QACIvE,IACA+B,IACO1B,EAAM+D,KAAK,WACd/D,EAAMoE,KAAK,qBAAsB1C,GAAgB0C,KAAK,qBAAsBpB,GAAYoB,KAAK,oBAAqBpD,OAI9HqD,QAAS,WACL,MAAOd,MAAKQ,KAAK,WACb,GAAI/D,GAAQT,EAAEgE,KACdvD,GAAMsE,OAAO,iBACbtE,EAAM,GAAGe,kBAAkBjB,qBAAqByE,eACzCvE,GAAM,GAAGe,qBAGxB+B,IAAK,SAASgB,GAIV,QAASU,GAAOC,GACZ,GAAIC,KAMJ,OALAnF,GAAEwE,KAAKU,EAAK,SAAST,EAAKW,GACQ,KAA3BpF,EAAEqF,QAAQD,EAAID,IACbA,EAAQT,KAAKU,KAGdD,EAVX,GAAI1E,GAAQuD,KACR7D,EAAWM,EAAM,GAAGe,kBAAkBrB,QAY1CoE,GAAWA,YAAmBe,OAAQf,GAASA,GAC/CA,EAAUU,EAAOV,EAAQgB,OAAOpF,EAASmB,OACzCnB,EAASmB,KAAOnB,EAASoB,KAAKgD,IAElCS,OAAQ,SAAST,GACb,GAAIiB,GACA/E,EAAQuD,KACR7D,EAAWM,EAAM,GAAGe,kBAAkBrB,QAE1CoE,GAAWA,YAAmBe,OAAQf,GAASA,GAC/CvE,EAAEwE,KAAKD,EAAS,SAASE,EAAK5C,GAC1B2D,EAAQrF,EAASmE,OAAOnE,EAASmB,KAAMO,GAC1B,KAAV2D,GACCrF,EAASmB,KAAKmE,OAAOD,EAAO,MAM5CxF,GAAE0F,GAAGC,aAAe,SAASC,GACzB,MAAI3F,GAAQ2F,GACD3F,EAAQ2F,GAAQC,MAAM7B,KAAMsB,MAAMQ,UAAUC,MAAMC,KAAKC,UAAW,IAChD,gBAAXL,IAAwBA,MAGtC5F,GAAEkG,MAAMN,EAAS,qBAFV3F,EAAQC,KAAK2F,MAAM7B,KAAMiC,aAKzCE,OAASC","sourcesContent":["/**\n * Zepto-Autocomplete\n * @author Yugal Jindle\n * @repo   https://github.com/yugal/zepto-autocomplete.git\n */\n\n(function($) {\n    'use strict';\n\n    var methods = {\n        init: function(settings) {\n            var $currentOpt,\n                $this = this, // selected zepto/jquery input\n                settingsDefaults = {\n                    data: [],\n                    dataMethod: undefined,\n                    minLength: 1,\n                    maxCount: Infinity,\n                    extraClass: '',\n                    appendTo: '',\n                    position: true,\n                    sort: function(data) {\n                        // Skip sorting if data received from `dataMethod`\n                        return (this.dataMethod instanceof Function)? data:data.sort();\n                    },\n                    matcher: function(query, option) {\n                        return option.toString().toLowerCase().indexOf(query.toLowerCase()) !== -1;\n                    },\n                    lookUp: function(data, option) {\n                        var options = [];\n                        $.each(data, function(idx, val) {\n                            options.push(val.toString());\n                        });\n                        return options.indexOf(option.toString());\n                    },\n                    renderOption: function(option) {\n                        return option.toString();\n                    },\n                    onOptionSelect: function(option) {\n                        return option.toString(); // Returned value updates the input\n                    },\n                    onBlur: function($optionsContainerDiv) {\n                        $optionsContainerDiv.hide();\n                    }\n                },\n                storedData = $this[0]._autoCompleteData;\n\n            settings = $.extend(settingsDefaults, settings);\n\n            function createOptionsDiv() {\n                var position, $appendDiv, $optionsContainerDiv;\n                $optionsContainerDiv = $('<div>');\n                if(settings.position) {\n                    position = {\n                        left: $this.offset().left,\n                        top: $this.offset().top + $this.height()\n                    };\n                    $optionsContainerDiv.css('position', 'relative').css('top', position.top).css('left', position.left).css('zIndex', 1000);\n                }\n                // Configure $optionsContainerDiv\n                $optionsContainerDiv.addClass('autocomplete-options-container').addClass(settings.extraClass);  // Adds class autocomplete-options-container\n                $this.attr('data-autocomplete', 'true');\n                $optionsContainerDiv.on('mousedown.autocomplete', 'div', chooseOption);\n                $optionsContainerDiv.hide();\n                $appendDiv = (settings.appendTo)? $(settings.appendTo):$('body');\n                $appendDiv.append($optionsContainerDiv);\n                settings.data = settings.sort(settings.data);\n                // Save\n                $this[0]._autoCompleteData = {\n                    settings: settings,\n                    $optionsContainerDiv: $optionsContainerDiv\n                };\n            }\n            function onBlur() {\n                var $optionsContainerDiv = $this[0]._autoCompleteData.$optionsContainerDiv,\n                    settings = $this[0]._autoCompleteData.settings;\n                settings.onBlur($optionsContainerDiv);\n            }\n            function chooseOption(event, optIndex) {\n                var value, option,\n                    settings = $this[0]._autoCompleteData.settings;\n                optIndex = optIndex || $(event.target).closest('.autocomplete-opt').attr('data-opt-index');\n                option = settings.data[optIndex];\n                value = settings.onOptionSelect(option);\n                if(value !== undefined) {\n                    $this.val(value);\n                }\n                computeOptions();\n                setTimeout(function() {\n                    $this.focus();\n                });\n            }\n            function changeCurrentOpt($other) {\n                if($currentOpt) {\n                    $currentOpt.removeClass('autocomplete-opt-curr');  // Removes class autocomplete-opt\n                }\n                $currentOpt = $other;\n                $currentOpt.addClass('autocomplete-opt-curr');  // Adds class autocomplete-opt\n            }\n            function computeOptions() {\n                var option,\n                    callback,\n                    $optionDiv,\n                    $divs = $(), // List with zepto/jQuery methods\n                    query = $this.val(),\n                    $optionsContainerDiv = $this[0]._autoCompleteData.$optionsContainerDiv,\n                    settings = $this[0]._autoCompleteData.settings;\n                $optionsContainerDiv.empty(); // No events on `options` (safe)\n                // Honor minLength\n                if(query.length<settings.minLength) {\n                    $optionsContainerDiv.hide();\n                    return;\n                }\n                // Compute callback\n                callback = function(data) {\n                    settings.data = settings.sort(data);\n                    for(var i=0; i<data.length && $divs.length<=settings.maxCount; i++) {\n                        option = data[i];\n                        // Don't match if data received from `dataMethod`\n                        if (settings.dataMethod instanceof Function || settings.matcher(query, option)) {\n                            // Adds class autocomplete-opt\n                            $optionDiv = $('<div class=\"autocomplete-opt\"></div>');\n                            $optionDiv.attr('data-opt-index', i);\n                            $optionDiv.append(settings.renderOption(option));\n                            $divs = $divs.add($optionDiv);\n                        }\n                    }\n                    if ($divs.length>0) {\n                        $optionsContainerDiv.append($divs);\n                        $optionsContainerDiv.show();\n                    }\n                };\n                if(settings.dataMethod instanceof Function) {\n                    settings.dataMethod(query, callback);\n                } else {\n                    callback(settings.data);\n                }\n            }\n            function keyHandler(event) {\n                var prev, next,\n                    $optionsContainerDiv = $this[0]._autoCompleteData.$optionsContainerDiv;\n                switch (event.keyCode) {\n                    case 38: // Up\n                        if(!$currentOpt) {\n                            changeCurrentOpt($optionsContainerDiv.children().eq(0));\n                            prev = $currentOpt;\n                        } else {\n                            prev = $currentOpt.prev();\n                        }\n                        if(prev && prev.hasClass('autocomplete-opt')) {\n                            changeCurrentOpt(prev);\n                        }\n                        break;\n                    case 40: // Down\n                        if(!$currentOpt) {\n                            changeCurrentOpt($optionsContainerDiv.children().eq(0));\n                            next = $currentOpt;\n                        } else {\n                            next = $currentOpt.next();\n                        }\n                        if(next && next.hasClass('autocomplete-opt')) {\n                            changeCurrentOpt(next);\n                        }\n                        break;\n                    case 13:  // Return\n                        if($optionsContainerDiv.css('display') !== 'none') {\n                            chooseOption(event, $currentOpt.attr('data-opt-index'));\n                        }\n                        break;\n                    default:\n                        computeOptions();\n                        break;\n                }\n            }\n\n            // if not initialized\n            if(!storedData) {\n                createOptionsDiv();\n                computeOptions();\n                return $this.each(function() {\n                    $this.bind('focus.autocomplete', computeOptions).bind('keyup.autocomplete', keyHandler).bind('blur.autocomplete', onBlur);\n                });\n            }\n        },\n        destroy: function() {\n            return this.each(function() {\n                var $this = $(this);\n                $this.unbind('.autocomplete');\n                $this[0]._autoCompleteData.$optionsContainerDiv.remove();\n                delete $this[0]._autoCompleteData;\n            });\n        },\n        add: function(options) {\n            var $this = this, // selected jquery object\n                settings = $this[0]._autoCompleteData.settings;\n            // create unique\n            function unique(arr) {\n                var uniqArr = [];\n                $.each(arr, function(idx, el) {\n                    if($.inArray(el, uniqArr) === -1) {\n                        uniqArr.push(el);\n                    }\n                });\n                return uniqArr;\n            }\n            // options ~ Array\n            options = (options instanceof Array)? options:[options];\n            options = unique(options.concat(settings.data));\n            settings.data = settings.sort(options);\n        },\n        remove: function(options) {\n            var index,\n                $this = this, // selected jquery object\n                settings = $this[0]._autoCompleteData.settings;\n            // options ~ Array\n            options = (options instanceof Array)? options:[options];\n            $.each(options, function(idx, option) {\n                index = settings.lookUp(settings.data, option);\n                if(index !== -1) {\n                    settings.data.splice(index, 1);\n                }\n            });\n        }\n    };\n\n    $.fn.autocomplete = function(method) {\n        if (methods[method]) {\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n        } else if (typeof method === 'object' || !method) {\n            return methods.init.apply(this, arguments);\n        } else {\n            $.error(method + ' :: Not supported');\n        }\n    };\n})(Zepto || jQuery);\n"],"sourceRoot":"/source/"}